/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "github.com/piersharding/nfsshare-controller/pkg/apis/nfssharecontroller/v1alpha1"
)

// NfsshareLister helps list Nfsshares.
type NfsshareLister interface {
	// List lists all Nfsshares in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Nfsshare, err error)
	// Nfsshares returns an object that can list and get Nfsshares.
	Nfsshares(namespace string) NfsshareNamespaceLister
	NfsshareListerExpansion
}

// nfsshareLister implements the NfsshareLister interface.
type nfsshareLister struct {
	indexer cache.Indexer
}

// NewNfsshareLister returns a new NfsshareLister.
func NewNfsshareLister(indexer cache.Indexer) NfsshareLister {
	return &nfsshareLister{indexer: indexer}
}

// List lists all Nfsshares in the indexer.
func (s *nfsshareLister) List(selector labels.Selector) (ret []*v1alpha1.Nfsshare, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Nfsshare))
	})
	return ret, err
}

// Nfsshares returns an object that can list and get Nfsshares.
func (s *nfsshareLister) Nfsshares(namespace string) NfsshareNamespaceLister {
	return nfsshareNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NfsshareNamespaceLister helps list and get Nfsshares.
type NfsshareNamespaceLister interface {
	// List lists all Nfsshares in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Nfsshare, err error)
	// Get retrieves the Nfsshare from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Nfsshare, error)
	NfsshareNamespaceListerExpansion
}

// nfsshareNamespaceLister implements the NfsshareNamespaceLister
// interface.
type nfsshareNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Nfsshares in the indexer for a given namespace.
func (s nfsshareNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Nfsshare, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Nfsshare))
	})
	return ret, err
}

// Get retrieves the Nfsshare from the indexer for a given namespace and name.
func (s nfsshareNamespaceLister) Get(name string) (*v1alpha1.Nfsshare, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nfsshare"), name)
	}
	return obj.(*v1alpha1.Nfsshare), nil
}
